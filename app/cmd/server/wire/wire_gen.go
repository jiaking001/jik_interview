// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"app/internal/handler"
	"app/internal/job"
	"app/internal/repository"
	"app/internal/server"
	"app/internal/service"
	"app/pkg/app"
	"app/pkg/jwt"
	"app/pkg/log"
	"app/pkg/server/http"
	"app/pkg/sid"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	client := repository.NewRedis(viperViper)
	handlerHandler := handler.NewHandler(logger)
	db := repository.NewDB(viperViper, logger)
	elasticsearchClient := repository.NewElasticsearch(viperViper)
	repositoryRepository := repository.NewRepository(logger, db, client, elasticsearchClient)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userService := service.NewUserService(serviceService, userRepository)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	questionRepository := repository.NewQuestionRepository(repositoryRepository)
	questionService := service.NewQuestionService(serviceService, questionRepository)
	questionHandler := handler.NewQuestionHandler(handlerHandler, questionService)
	questionBankRepository := repository.NewQuestionBankRepository(repositoryRepository)
	questionBankService := service.NewQuestionBankService(serviceService, questionBankRepository)
	questionBankHandler := handler.NewQuestionBankHandler(handlerHandler, questionBankService, questionService)
	questionBankQuestionRepository := repository.NewQuestionBankQuestionRepository(repositoryRepository)
	questionBankQuestionService := service.NewQuestionBankQuestionService(serviceService, questionBankQuestionRepository)
	questionBankQuestionHandler := handler.NewQuestionBankQuestionHandler(handlerHandler, questionBankQuestionService)
	httpServer := server.NewHTTPServer(logger, viperViper, jwtJWT, client, userHandler, questionHandler, questionBankHandler, questionBankQuestionHandler)
	jobJob := job.NewJob(transaction, logger, sidSid)
	userJob := job.NewUserJob(jobJob, userRepository)
	questionJob := job.NewQuestionJob(jobJob, questionRepository)
	jobServer := server.NewJobServer(logger, userJob, questionJob)
	appApp := newApp(httpServer, jobServer)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRedis, repository.NewElasticsearch, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository, repository.NewQuestionBankRepository, repository.NewQuestionRepository, repository.NewQuestionBankQuestionRepository)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService, service.NewQuestionBankService, service.NewQuestionService, service.NewQuestionBankQuestionService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler, handler.NewQuestionBankHandler, handler.NewQuestionHandler, handler.NewQuestionBankQuestionHandler)

var jobSet = wire.NewSet(job.NewJob, job.NewUserJob, job.NewQuestionJob)

var serverSet = wire.NewSet(server.NewHTTPServer, server.NewJobServer)

// build App
func newApp(
	httpServer *http.Server,
	jobServer *server.JobServer,

) *app.App {
	return app.NewApp(app.WithServer(httpServer, jobServer), app.WithName("demo-server"))
}
